#include <iostream>
#include <vector>

class SparseMatrix {
private:
    int numRows;
    int numCols;
    std::vector<std::vector<int>> sparseArray;

public:
    // Constructor to initialize the sparse matrix
    SparseMatrix(int rows, int cols) : numRows(rows), numCols(cols) {}

    // Function to insert a non-zero element into the sparse matrix
    void insert(int row, int col, int value) {
        sparseArray.push_back({row, col, value});
    }

    // Function to display the sparse matrix
    void display() {
        std::cout << "Sparse Matrix:" << std::endl;
        for (const auto& triplet : sparseArray) {
            std::cout << "Row: " << triplet[0]
                      << ", Column: " << triplet[1]
                      << ", Value: " << triplet[2] << std::endl;
        }
    }
};

int main() {
    int numRows, numCols;
    std::cout << "Enter the number of rows and columns for the sparse matrix: ";
    std::cin >> numRows >> numCols;

    SparseMatrix sparseMatrix(numRows, numCols);

    int nonZeroCount;
    std::cout << "Enter the number of non-zero elements: ";
    std::cin >> nonZeroCount;

    for (int i = 0; i < nonZeroCount; ++i) {
        int row, col, value;
        std::cout << "Enter row, column, and value for element " << i + 1 << ": ";
        std::cin >> row >> col >> value;
        sparseMatrix.insert(row, col, value);
    }

    sparseMatrix.display();

    return 0;
}

